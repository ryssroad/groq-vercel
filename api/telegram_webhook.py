# api/telegram_webhook.py

import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from tavily import TavilyClient
from ai import generateText
from ai_sdk.openai import createOpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TAVILY_API_KEY = os.getenv('TAVILY_API_KEY')
GROQ_API_KEY = os.getenv('GROQ_API_KEY')
WEBHOOK_PATH = os.getenv('WEBHOOK_PATH', '/api/telegram_webhook')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
if not all([TELEGRAM_TOKEN, TAVILY_API_KEY, GROQ_API_KEY]):
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
tavily_client = TavilyClient(api_key=TAVILY_API_KEY)
groq = createOpenAI({
    'baseURL': 'https://api.groq.com/openai/v1',
    'apiKey': GROQ_API_KEY,
})

async def generate_response(prompt):
    try:
        response = await generateText({
            'model': groq('mixtral-8x7b-32768'),
            'prompt': prompt,
        })
        return response.text
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Groq API: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."

@dp.message(Command("summary"))
async def command_summary_handler(message: Message) -> None:
    query = message.text.replace("/summary", "").strip()
    
    if not query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /summary")
        return

    await message.answer("–ò—â—É –∏ —Å—É–º–º–∏—Ä—É—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É...")
    
    try:
        news_results = tavily_client.search(query=query, search_depth="advanced", include_images=False, max_results=5)
        
        summary_prompt = "Summarize the following news results in Russian:\n\n"
        for result in news_results.get('results', []):
            summary_prompt += f"Title: {result.get('title', 'No title')}\nContent: {result.get('content', 'No content')}\n\n"
        
        summary = await generate_response(summary_prompt)
        
        formatted_summary = f"–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n\n{summary}"
        
        await message.answer(formatted_summary)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

@dp.message(Command("ask"))
async def command_ask_handler(message: Message) -> None:
    query = message.text.replace("/ask", "").strip()
    
    if not query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask")
        return

    await message.answer("–ò—â—É –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
    
    try:
        answer = tavily_client.qna_search(query=query)
        formatted_answer = f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{answer}"
        await message.answer(formatted_answer)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")

@dp.message(Command("search"))
async def command_search_handler(message: Message) -> None:
    query = message.text.replace("/search", "").strip()
    
    if not query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /search")
        return

    await message.answer("–í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫...")
    
    try:
        search_results = tavily_client.search(query=query, search_depth="basic", include_images=False, max_results=5)
        
        links = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n\n"
        for i, result in enumerate(search_results.get('results', []), 1):
            links += f"{i}. {result.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}\n"
            links += f"üîó {result.get('url', '–ù–µ—Ç —Å—Å—ã–ª–∫–∏')}\n\n"
        
        await message.answer(links)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

@dp.message()
async def message_handler(message: types.Message) -> None:
    user_message = message.text

    try:
        response = await generate_response(user_message)
        await message.answer(response)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

async def handle_webhook(request):
    update = types.Update(**await request.json())
    await dp.feed_update(bot, update)

from http.server import HTTPServer, BaseHTTPRequestHandler
import json

class WebhookHandler(BaseHTTPRequestHandler):
    async def do_POST(self):
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length)
        update = types.Update(**json.loads(post_data))
        
        await dp.feed_update(bot, update)
        
        self.send_response(200)
        self.end_headers()

def main():
    server_address = ('', 8000)
    httpd = HTTPServer(server_address, WebhookHandler)
    print('Starting server...')
    httpd.serve_forever()

if __name__ == "__main__":
    main()
